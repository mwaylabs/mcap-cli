/*
 * mcap-deploy
 * https://github.com/mwaylabs/mcap-deploy
 *
 * Copyright (c) 2014 mwaylabs
 * Licensed under the MIT license.
 */

'use strict';

var assert = require('assert');
var log = require('../log');
var _ = require('lodash');
var ApplicationValidation = require('../validation');
var os = require('os');
var path = require('path');
var ignore = require('fstream-ignore');
var request = require('../util/request.js');
var archiver = require('archiver');
var VError = require('verror');
var stripJsonComments = require('strip-json-comments');

var ENDPPOINT = '/studio/upload';
var fs = require('fs');
var os = require('os');
var q = require('q');

var IGNORE_FILES = [".mcapignore", ".gitignore"];

function _request( params ) {
    params = params || {};
    var deferred = q.defer();

    var defaults = {
        method: 'GET',
        headers: {
            "Accept": "application/json",
            "Content-Type": "application/json"
        },
        json: true
    };

    _.defaults(params, defaults);

    log.debug('[' + params.method + '] ' + params.url);
    log.debug(params);

    request.request(params, function( err, response, body ) {
        if ( err ) {
            return deferred.reject(new VError(err, 'Connection to %s failed', params.url));
        }
        var statusCode = parseInt(response.statusCode, 10);
        log.debug('_request response with statusCode %s and response', statusCode, body);

        if ( statusCode >= 400) {
            log.debug('_request reject');
            return deferred.reject(body, response);
        }
        deferred.resolve(body, response);
    });
    return deferred.promise;
}

function _validateProject(projectPath) {
  var deferred = q.defer();

  var validation = new ApplicationValidation();
  validation.run(projectPath, function(err) {
    if (err) {
      return deferred.reject(err);
    }
    deferred.resolve();
  });

  return deferred.promise;
}

/**
 * Get the current authentication to get the group of the user.
 */
var currentAuthentication = function (options) {
    var params = {
      method: 'GET',
      server: options.server,
      url: 'gofer/system/security/currentAuthorization',
    };

    return _request(params).then(function(data) {
      if (data && data.organization && data.organization.uniqueName) {
          return data;
      }

      var deferred = q.defer();
      deferred.reject(new Error('Authentication failed'));
      return deferred.promise;
    });
};

/**
 * Get the organisation and test if it has defaultRoles. If not raise an error. If an application is generated by a user in a group that has no defaultRoles the application
 * doesn't work as expected.
 */
var getOrganization = function (orga, options) {
    assert(orga, 'Missing first parameter orga');
    assert(orga.uuid, 'Missing uuid for organization');

    var params = {
      method: 'GET',
      server: options.server,
      url: 'gofer/security/rest/organizations/' + orga.uuid,
    };

    return _request(params).then(function(data) {
      if (data && Array.isArray(data.defaultRoles) && data.defaultRoles.length > 0) {
          return data;
      }

      var deferred = q.defer();
      deferred.reject('Organization has no defaultRoles. This will cause problems creating applications. Operation not permitted.');
      return deferred.promise;
    });
};

/**
 *
 * @param {Object} options
 * @param {Object} request
 * @param {String} organization unique name
 * @config {String}   baseurl  mandatory
 * @config {String}   file
 * @config {Object}   fields {
 * @config {Function} progress
 * @config {String}   username
 * @config {String}   password
 * @config {String}   endpoint
 * @returns {promise|*|Q.promise|*|exports}
 */
var upload = function (options, organization) {
    // the options for the request
    var endpoint = options.endpoint || ENDPPOINT;
    // add an beginning slash to the endpoint if there is none
    if (endpoint[0] !== '/') {
        endpoint = '/' + endpoint;
    }
    var importOptions = {
        server: options.server,
        url: organization + endpoint,
        headers: {
            "Accept": "text/plain"
        },
        method: 'POST',
        file: options.file,
        fields: options.fields,
        progress: options.progress,
		configure: options.configure
    };
    if (options.username && options.password) {
        importOptions.auth = {
            "user": options.username,
            "pass": options.password
        };
    }

    return request.formdata(importOptions);
};

var createZip = function (rootPath) {
    var deferred = q.defer();

    var archive = archiver('zip');
    var zipFilePath = path.resolve(os.tmpdir() + '/mcap_app_' + Date.now() + '.zip');
    var output = fs.createWriteStream(zipFilePath);

    ignore({ path: rootPath, ignoreFiles: IGNORE_FILES})
    .on('child', function (c) {
        var name = c.path.substr(c.root.path.length + 1);
        log.debug('Add file to zip %s', name);
        if (c.type === 'File') {
            archive.append(c, { name: name});
        } else if (c.type === 'Directory') {
            archive.append(null, { name: name + '/'});
        }

    }).on('end', function() {
        archive.finalize();
    });

    output.on('finish', function() {
      log.debug('Zip created at %s', zipFilePath);
      deferred.resolve(zipFilePath);
    });

    archive.pipe(output);

    return deferred.promise;
};

var deleteZip = function (zipPath) {
  log.debug('Delete zip file' + zipPath);
  var deferred = q.defer();
  fs.unlink(zipPath, function(err) {
    if (err) {
      return deferred.reject(err);
    }
    deferred.resolve();
  });
  return deferred.promise;
};

var getProjectData = function(rootPath, options) {
  var deferred = q.defer();

  var filePath = path.resolve(rootPath, 'mcap.json');
  fs.readFile(filePath, {
    encoding: 'utf8'
  }, function(err, content) {
    if (err) {
      return deferred.reject(err);
    }
    try {
      var pkg = JSON.parse(stripJsonComments(content));
      options.fields = {
        name: pkg.name,
        uuid: pkg.uuid
      };
      options.baseAlias = pkg.baseAlias;
      deferred.resolve();
    } catch (err) {
      deferred.reject(err);
    }
  });

  return deferred.promise;
};

var deploy = function (options) {
    assert(options, 'Missing argument: options');
    assert(options.server, 'Missing argument: options.server');
    assert(options.rootPath, 'Missing argument: options.rootPath');

    var rootPath = options.rootPath;
    var organization;

    delete options.rootPath;

    return _validateProject(rootPath)
      .then(function() {
        return currentAuthentication(options);
      })
      .then(function(data) {
        organization = data.organization.uniqueName;
        return getOrganization(data.organization, options);
      })
      .then(function() {
        return getProjectData(rootPath, options);
      })
      .then(function() {
        return createZip(rootPath);
      })
      .then(function(zipPath) {
        options.file = zipPath;
		options.configure = function(r) {
			// redirect response stream to console,
			// could use on-data handler with chalk for highlighting...
			r.pipe(process.stdout, { 'end': false });
		};
        return upload(options, organization);
      })
      .then(function() {
        return deleteZip(options.file).then(function() {
          var result = request.configure(_.defaults({
            url: organization + options.baseAlias
          }, options)).url;
          if (result.slice(-1) !== '/') {
              result += '/';
          }
          return result;
        });
      }).catch(function(err) {
        var deferred = q.defer();
        if (err.body === '') {
          if (err.statusCode === 401) {
            err.body = 'Access denied.';
          } else {
            err.body = 'There is no body for statusCode ' + err.statusCode + ' set.';
          }
        }

        // VError does not allow access to the original error.
        // Therefore we could not use VErrors for our custom errors
        if (err.name !== 'LintError' || err.name !== 'ValidateError') {
          new VError('Upload failed: %s', err.body || err);
        }
        deferred.reject(err);
        return deferred.promise;
      });
};

// API
exports.deploy = deploy;

// API for Tests
exports.ENDPPOINT = ENDPPOINT;
exports.upload = upload;
exports.createZip = createZip;
exports.deleteZip = deleteZip;
